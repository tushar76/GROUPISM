{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\Work\\\\my-app\\\\src\\\\components\\\\services\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  role: localStorage.getItem(\"role\") || null,\n  loading: false,\n  error: null\n};\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        ...state,\n        user: action.payload.user,\n        role: action.payload.role,\n        loading: false\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n        role: null\n      };\n    default:\n      return state;\n  }\n}\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Predefined mock user for demonstration\n  const mockUsers = [{\n    email: \"tusharkumar8008@gmail.com\",\n    password: \"tushar33\",\n    role: \"admin\"\n  }];\n\n  // Mock login function\n  const login = (email, password) => {\n    dispatch({\n      type: \"LOGIN_REQUEST\"\n    });\n    const user = mockUsers.find(u => u.email === email && u.password === password);\n    if (user) {\n      localStorage.setItem(\"user\", JSON.stringify(user.email));\n      localStorage.setItem(\"role\", user.role);\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          user: user.email,\n          role: user.role\n        }\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_FAILURE\",\n        payload: \"Invalid email or password\"\n      });\n    }\n  };\n\n  // Mock register function (allows adding new users locally)\n  const register = (email, password) => {\n    dispatch({\n      type: \"LOGIN_REQUEST\"\n    });\n    const userExists = mockUsers.some(u => u.email === email);\n    if (userExists) {\n      dispatch({\n        type: \"LOGIN_FAILURE\",\n        payload: \"User already exists\"\n      });\n    } else {\n      mockUsers.push({\n        email,\n        password,\n        role: \"user\"\n      });\n      localStorage.setItem(\"user\", JSON.stringify(email));\n      localStorage.setItem(\"role\", \"user\");\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          user: email,\n          role: \"user\"\n        }\n      });\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"role\");\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      ...state,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","AuthContext","initialState","user","JSON","parse","localStorage","getItem","role","loading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","mockUsers","email","password","login","find","u","setItem","stringify","register","userExists","some","push","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/Work/my-app/src/components/services/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  role: localStorage.getItem(\"role\") || null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN_REQUEST\":\r\n      return { ...state, loading: true, error: null };\r\n    case \"LOGIN_SUCCESS\":\r\n      return { ...state, user: action.payload.user, role: action.payload.role, loading: false };\r\n    case \"LOGIN_FAILURE\":\r\n      return { ...state, error: action.payload, loading: false };\r\n    case \"LOGOUT\":\r\n      return { ...state, user: null, role: null };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Predefined mock user for demonstration\r\n  const mockUsers = [\r\n    { email: \"tusharkumar8008@gmail.com\", password: \"tushar33\", role: \"admin\" },\r\n  ];\r\n\r\n  // Mock login function\r\n  const login = (email, password) => {\r\n    dispatch({ type: \"LOGIN_REQUEST\" });\r\n    const user = mockUsers.find((u) => u.email === email && u.password === password);\r\n    if (user) {\r\n      localStorage.setItem(\"user\", JSON.stringify(user.email));\r\n      localStorage.setItem(\"role\", user.role);\r\n      dispatch({ type: \"LOGIN_SUCCESS\", payload: { user: user.email, role: user.role } });\r\n    } else {\r\n      dispatch({ type: \"LOGIN_FAILURE\", payload: \"Invalid email or password\" });\r\n    }\r\n  };\r\n\r\n  // Mock register function (allows adding new users locally)\r\n  const register = (email, password) => {\r\n    dispatch({ type: \"LOGIN_REQUEST\" });\r\n    const userExists = mockUsers.some((u) => u.email === email);\r\n    if (userExists) {\r\n      dispatch({ type: \"LOGIN_FAILURE\", payload: \"User already exists\" });\r\n    } else {\r\n      mockUsers.push({ email, password, role: \"user\" });\r\n      localStorage.setItem(\"user\", JSON.stringify(email));\r\n      localStorage.setItem(\"role\", \"user\");\r\n      dispatch({ type: \"LOGIN_SUCCESS\", payload: { user: email, role: \"user\" } });\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"role\");\r\n    dispatch({ type: \"LOGOUT\" });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ ...state, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,MAAMM,YAAY,GAAG;EACnBC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDC,IAAI,EAAEF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI;EAC1CE,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,SAASC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAClC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGF,KAAK;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACjD,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGE,KAAK;QAAET,IAAI,EAAEU,MAAM,CAACE,OAAO,CAACZ,IAAI;QAAEK,IAAI,EAAEK,MAAM,CAACE,OAAO,CAACP,IAAI;QAAEC,OAAO,EAAE;MAAM,CAAC;IAC3F,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGG,KAAK;QAAEF,KAAK,EAAEG,MAAM,CAACE,OAAO;QAAEN,OAAO,EAAE;MAAM,CAAC;IAC5D,KAAK,QAAQ;MACX,OAAO;QAAE,GAAGG,KAAK;QAAET,IAAI,EAAE,IAAI;QAAEK,IAAI,EAAE;MAAK,CAAC;IAC7C;MACE,OAAOI,KAAK;EAChB;AACF;AAEA,OAAO,SAASI,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGrB,UAAU,CAACa,WAAW,EAAET,YAAY,CAAC;;EAE/D;EACA,MAAMkB,SAAS,GAAG,CAChB;IAAEC,KAAK,EAAE,2BAA2B;IAAEC,QAAQ,EAAE,UAAU;IAAEd,IAAI,EAAE;EAAQ,CAAC,CAC5E;;EAED;EACA,MAAMe,KAAK,GAAGA,CAACF,KAAK,EAAEC,QAAQ,KAAK;IACjCH,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAgB,CAAC,CAAC;IACnC,MAAMX,IAAI,GAAGiB,SAAS,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACJ,KAAK,KAAKA,KAAK,IAAII,CAAC,CAACH,QAAQ,KAAKA,QAAQ,CAAC;IAChF,IAAInB,IAAI,EAAE;MACRG,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEtB,IAAI,CAACuB,SAAS,CAACxB,IAAI,CAACkB,KAAK,CAAC,CAAC;MACxDf,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEvB,IAAI,CAACK,IAAI,CAAC;MACvCW,QAAQ,CAAC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE;UAAEZ,IAAI,EAAEA,IAAI,CAACkB,KAAK;UAAEb,IAAI,EAAEL,IAAI,CAACK;QAAK;MAAE,CAAC,CAAC;IACrF,CAAC,MAAM;MACLW,QAAQ,CAAC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE;MAA4B,CAAC,CAAC;IAC3E;EACF,CAAC;;EAED;EACA,MAAMa,QAAQ,GAAGA,CAACP,KAAK,EAAEC,QAAQ,KAAK;IACpCH,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAgB,CAAC,CAAC;IACnC,MAAMe,UAAU,GAAGT,SAAS,CAACU,IAAI,CAAEL,CAAC,IAAKA,CAAC,CAACJ,KAAK,KAAKA,KAAK,CAAC;IAC3D,IAAIQ,UAAU,EAAE;MACdV,QAAQ,CAAC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACrE,CAAC,MAAM;MACLK,SAAS,CAACW,IAAI,CAAC;QAAEV,KAAK;QAAEC,QAAQ;QAAEd,IAAI,EAAE;MAAO,CAAC,CAAC;MACjDF,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEtB,IAAI,CAACuB,SAAS,CAACN,KAAK,CAAC,CAAC;MACnDf,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;MACpCP,QAAQ,CAAC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE;UAAEZ,IAAI,EAAEkB,KAAK;UAAEb,IAAI,EAAE;QAAO;MAAE,CAAC,CAAC;IAC7E;EACF,CAAC;;EAED;EACA,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnB1B,YAAY,CAAC2B,UAAU,CAAC,MAAM,CAAC;IAC/B3B,YAAY,CAAC2B,UAAU,CAAC,MAAM,CAAC;IAC/Bd,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAS,CAAC,CAAC;EAC9B,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACiC,QAAQ;IAACC,KAAK,EAAE;MAAE,GAAGvB,KAAK;MAAEW,KAAK;MAAEK,QAAQ;MAAEI;IAAO,CAAE;IAAAf,QAAA,EAChEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACrB,EAAA,CA/CeF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAiD5B,OAAO,MAAMyB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7C,UAAU,CAACI,WAAW,CAAC;AAAA;AAACyC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}